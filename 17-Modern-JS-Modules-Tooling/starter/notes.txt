// MODULES
Modules are resuable pieces of code that encapsulates implementation details

Is usually a standalone file.
Not always the case, but when we think of modules, it's usually a file
can have imports and exports


Whatever we export from modules is called the public API
This is just like classes, where we can expose a public API for other code to consume


In the case of modules, this public API is actually 
consumed by importing values into a module

These other modules we import are then called "Dependancies" 
of the importing module, because the module "depends" on them to function.
The module cannot work without the importing code.


Modules make it easy to compose software, they are a bit like building blocks
to build more complex applications, or loops and samples in audio work.

Modules allow codes to split up and worked on by individual engineers.
Isolating components is a huge advantage of using modules.

Make it very easy to abstract or code - we can use modules to implement low level code
Modules allow for a more organised code base.

Modules allow us to reuse the same code in a project, or multiple projects.

As of ES6 js has a native built-in module system
Did have them before, but had to be implemented by engineer or use external libraries

Modules are stored as one module per file.


Diff between script and ES6 modules

ES6 
All top level variables are scoped to module 
The only way an outside module can access a value that's inside of a module
Is if the inside module exports that value.
If we don't export, we cannot see the variable from outside.
Always in strict mode
Top-level this is always undefined
We can import/export values between modules

link in HTML with <script type ="module"></script>

In scripts
All top level variables are global
Private variables are the solution to this problem (with modules)
Non-strict mode by default
Top-Level this points at the window object
Importing/Exporting values is impossible
link with <script></script>



[
import { rand } from '.math.js';
import { showDice } from '.dom.js';
]
The above is importing a value called rand from teh math.js module
And importing showDice from .dom.js module


The whole process of importing modules happens before code in 
the main module is actually executed

Only after all imported modules have been downloaded and executed, 
the main index.js module will be finally be executed

Modules are imported synchronously
This is possible thanks to top-level(static) imports, 
which make imports known before execution

Once parsing has completed, downloading of modules begins (downloading is asynchronous)
It is only the importing operation itself that is synchronous.

When a module is downloaded, it is parse and linked to index.js module.
And this connection is a life connect, epxorted values are not copied to imports. 
The import is basically a reference to the export at value.

So when the value changes in the exporting module, this is reflected in the importing module.
This is unique to ES6 modules.

Other module systems do not work like this, but js modules do!

Code in imported modules is then executed, and the process completes.

In ES2022, we can now use await keyword outside of async functions, atleast in modules
While very useful, this blocks the execution of the entire module now

One more important implication of top level await, if one module imports a module that has top level await
then the importing module will wait for the imported module to finish the blocking code.

Await outside of any async function can block function in it's own module, and any script that imports it as a module.


you can rebuild node_module folder with npm -i
(this is yarn at work.. what are the similarities between the two?)


Parcel is a bundler.
It's another build tool on npm
install as a dev Dependancies 
This separates them from regular dependancies like mapty
--save-dev

In the current situation, Parcel's job is to bundle together script.js,shoppingCart.js and cloneDeep.js
two options to use Parcel
NPX
app built into NPM
"npx parcel starter/index.html"


Parcel then starts a development server to preview code like using live server. 

creates a dist folder, there is a js script (our blundled code) and a map file


Parcel will rebuild with every saved change of code by default, so no need to manually push each time

/*
//Hot Module - This will allow stop reloading of the whole change when saving code changes
if (module.hot){
    module.hot.accept()
}
*/

NPM Scripts